{{template "base" .}}


{{define "title"}}
    Bronze Plan
{{end}}

{{define "content"}}
    {{$widget := index .Data "widget"}}
    <h2 class="mt-3 text-center">Bronze Plan</h2>
    <hr>

    <div class="alert alert-danger text-center d-none" id="card_messages"></div>
    <form action="/payment-succeeded" method="POST"
          name="charge_form" id="charge_form"
          class="d-block needs-validation charge-form"
          autocomplete="off" novalidate>

        <input type="hidden" name="product_id" id="product_id" value="{{$widget.ID}}">
        <input type="hidden" name="amount" id="amount" value="{{$widget.Price}}">

        <h3 class="mt-2 mb-3 text-center">{{formatCurrency $widget.Price}}/month</h3>
        <p>{{$widget.Description}}</p>
        <hr>

        <div class="mb-3">
            <label for="first_name" class="form-label">First Name</label>
            <input type="text" class="form-control" id="first_name" name="first_name"
                   required="" autocomplete="first_name_new">
            <div id="first_name_help" class="valid-feedback">
                Looks good!
            </div>
        </div>

        <div class="mb-3">
            <label for="last_name" class="form-label">Last Name</label>
            <input type="text" class="form-control" id="last_name" name="last_name"
                   required="" autocomplete="last_name_new">
            <div id="last_name_help" class="valid-feedback">
                Looks good!
            </div>
        </div>

        <div class="mb-3">
            <label for="cardholder_email" class="form-label">Email</label>
            <input type="email" class="form-control" id="cardholder_email" name="cardholder_email"
                   required="" autocomplete="cardholder_email_new">
        </div>

        <div class="mb-3">
            <label for="cardholder_name" class="form-label">Name on Card</label>
            <input type="text" class="form-control" id="cardholder_name" name="cardholder_name"
                   required="" autocomplete="cardholder_name_new">
        </div>

        <!-- card number will be built by stripe -->
        <div class="mb-3">
            <label for="card_element" class="form-label">Credit Card</label>
            <div id="card_element" class="form-control"></div>
            <div id="card_errors" class="alert alert-danger text-center d-none" role="alert"></div>
            <div id="card_success" class="alert alert-success text-center d-none" role="alert"></div>
        </div>

        <hr>

        <a id="pay_button" href="javascript:void(0)" class="btn btn-primary" onclick="val()">Pay {{formatCurrency $widget.Price}}/month</a>
        <div class="text-center d-none" id="processing_payment">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>

        <input type="hidden" name="payment_intent" id="payment_intent">
        <input type="hidden" name="payment_method" id="payment_method">
        <input type="hidden" name="payment_amount" id="payment_amount">
        <input type="hidden" name="payment_currency" id="payment_currency">
    </form>
{{end}}

{{define "js"}}
{{$widget := index .Data "widget"}}

<script src="https://js.stripe.com/v3"></script>

<script>
    let card;
    let stripe;
    const cardMessages = document.getElementById("card_messages")
    const payButton = document.getElementById("pay_button")
    const processing = document.getElementById("processing_payment")

    stripe = Stripe('{{.StripePublishableKey}}')

    function hidePayButton() {
        payButton.classList.add("d-none")
        processing.classList.remove("d-none")
    }

    function showPayButton() {
        payButton.classList.remove("d-none")
        processing.classList.add("d-none")
    }

    function showCardError(msg) {
        cardMessages.classList.add("alert-danger");
        cardMessages.classList.remove("alert-success");
        cardMessages.classList.remove("d-none");
        cardMessages.innerHTML = msg;
    }

    function showCardSuccess() {
        cardMessages.classList.remove("alert-danger");
        cardMessages.classList.add("alert-success");
        cardMessages.classList.remove("d-none");
        cardMessages.innerHTML = "Transaction successful";
    }

    function val() {
        let form = document.getElementById("charge_form")
        // use standard Bootstrap validation
        if (form.checkValidity() === false) {
            this.event.preventDefault();
            this.event.stopPropagation();
            form.classList.add("was-validated");
            return;
        }
        form.classList.add("was-validated");
        hidePayButton()

        let amountToCharge = document.getElementById("amount").value;

        stripe.createPaymentMethod({
            type: 'card',
            card: card,
            billing_details: {
                email: document.getElementById('cardholder_email').value,
            },
        }).then(stripePaymentMethodHandler);
    }

    function stripePaymentMethodHandler(result) {
        if (result.error) {
            showCardError(result.error.message)
        } else {
            // create customer and subscribe to plan
            let payload = {
                product_id: document.getElementById('product_id').value,
                plan: '{{$widget.PlanID}}',
                payment_method: result.paymentMethod.id,
                email: document.getElementById("cardholder_email").value,
                last_four: result.paymentMethod.card.last4,
                card_brand: result.paymentMethod.card.brand,
                exp_month: result.paymentMethod.card.exp_month,
                exp_year: result.paymentMethod.card.exp_year,
                first_name: document.getElementById("first_name").value,
                last_name: document.getElementById("last_name").value,
                amount: document.getElementById("amount").value,
            }

            const requestOptions = {
                method: 'post',
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(payload)
            }

            fetch("{{.API}}/api/create-customer-and-subscribe-to-plan", requestOptions)
                .then(response => response.json())
                .then(function(data) {
                    if (data.error === false) {
                        console.log(data)
                        processing.classList.add("d-none")
                        showCardSuccess()
                        // sessionStorage a available by default in JS
                        // The read-only sessionStorage property accesses a session Storage
                        // object for the current origin. sessionStorage is similar to localStorage;
                        // the difference is that while data in localStorage doesn't expire,
                        // data in sessionStorage is cleared when the page session ends.
                        sessionStorage.first_name = document.getElementById("first_name").value;
                        sessionStorage.last_name = document.getElementById("last_name").value;
                        sessionStorage.amount = "{{formatCurrency $widget.Price}}";
                        sessionStorage.last_four = result.paymentMethod.card.last4;

                        location.href = "/receipt/bronze";
                    } else {
                        document.getElementById("charge_form").classList.remove("was-validated");

                        Object.entries(data.errors).forEach((i) => {
                            const [key, value] = i;
                            console.log(`${key}:${value}`);
                            document.getElementById(key).classList.add("is-invalid");
                            document.getElementById(key + "_help").classList.remove("valid-feedback");
                            document.getElementById(key + "_help").classList.add("invalid-feedback");
                            document.getElementById(key + "_help").innerText = value;
                        })
                        showPayButton();
                    }
                })
        }
    }

    (function() {
        // create stripe & elements
        const elements = stripe.elements();
        const style = {
            base: {
                fontSize: '16px',
                lineHeight: '24px'
            }
        };

        // create card entry
        card = elements.create('card', {
            style: style,
            hidePostalCode: true,
        })
        card.mount("#card_element");

        // check for input errors
        card.addEventListener('change', function(event) {
            let displayError = document.getElementById("card_errors");
            if (event.error) {
                displayError.classList.remove('d-none');
                displayError.textContent = event.error.message;
            } else {
                displayError.classList.add('d-none');
                displayError.textContent = '';
            }
        })
    })();

</script>
{{end}}